./io_scene_nif/modules/nif_import/geometry/vertex/groups.py:                print(f"Vertex {i} has weights not summing to one: {sum_weights[i]}")
./io_scene_nif/nif_common.py:        # print scripts info
./io_scene_nif/nif_export.py:                        # print "=== DEBUG: MOPP TREE ==="
./io_scene_nif/nif_export.py:                        # print "=== END OF MOPP TREE ==="
./io_scene_nif/utils/util_decorator.py:                    print(str(t))
./io_scene_nif/utils/util_logging.py:        print(f"{str(level)}: {message}")
./io_scene_nif/utils/util_nodes.py:                #print (f"level: {level}")
./io_scene_nif/utils/util_nodes.py:            #print (f"while: level: {level}")
./io_scene_nif/utils/util_nodes.py:            #print (f"inputlist: {inputlist}")
./io_scene_nif/utils/util_nodes.py:                        #print (f"appending node: {node1}")
./io_scene_nif/utils/util_nodes.py:                #print (f"no inputlist at level: {level}")
./io_scene_nif/utils/util_nodes.py:    #print ("Duplicate nodes removed")
./io_scene_nif/utils/util_nodes.py:        #print (f"row1: {row1} {a[row1]}")
./io_scene_nif/utils/util_nodes.py:            #print (f"col1: {col1}")
./io_scene_nif/utils/util_nodes.py:                        #print (f"Duplicate node found: {col1}")
./io_scene_nif/utils/util_nodes.py:                        #print (f"Delete node: {col2}")
./io_scene_nif/utils/util_nodes.py:        #print (f"level, nodes: {level} {nodes}")
./io_scene_nif/utils/util_nodes.py:    #print ("nodes arrange def")
./io_scene_nif/utils/util_nodes.py:    #print (f"nodelist, xpos: {nodelist} {xpos}")
./testframework/blender-nosetests.py:-s : stdout is not captured by default, eg print().
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    # print_rotation(b_rot_eul)
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:def print_rotation(b_rot_eul):
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print("HEERE")
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(b_rot_eul)
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(b_rot_eul.x)
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(b_rot_eul.y)
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(b_rot_eul.z)
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print("RADS")
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(math.radians(30.0))
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(math.radians(60.0))
./testframework/integration/modules/geometry/trishape/b_gen_geometry.py:    print(math.radians(90.0))
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:        print("Vertex color list")
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:            print(item.color)
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:        # print("Sub Check: Comparing vertex color")
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:        # print(f"n_vert: {str(vertexcolor.r)} base_vert: {str(self.vertcol[index][0])}")
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:        # print("n_vert: {str(vertexcolor.g)} base_vert: {str(self.vertcol[index][1])}")
./testframework/integration/modules/geometry/vertex/color/test_vertexcolor.py:        # print("n_vert: {str(vertexcolor.b)} base_vert: {str(self.vertcol[index][2])}")
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_obj.location - {b_obj.location)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_obj.scale - {b_obj.scale)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_rot_eul - {b_rot_eul)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_rot_eul(x,y,z) - {b_rot_axis)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_loc_vec - {b_loc_vec)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_scale_vec - {b_scale_vec)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_rot_eul - {b_rot_eul)}"
./testframework/integration/modules/object/b_gen_object.py:    print(f"b_rot_eul(x,y,z) - {b_rot_axis)}"
./testframework/integration/modules/object/n_gen_object.py:    print("Translation - {0}".format(location))
./testframework/integration/modules/object/n_gen_object.py:    print("Scale - {0}".format(scale))
./testframework/integration/modules/object/n_gen_object.py:    print("n_rot_eul - {0}".format(n_rot_eul))
./testframework/integration/modules/object/n_gen_object.py:    print("n_rot_eul(x,y,z) - {0}".format(n_rot_axis))
./testframework/integration/modules/scene/b_gen_header.py:    print(f"Expected - {nif_ver}, {user_ver}, {user_ver_2}")
./testframework/integration/modules/scene/b_gen_header.py:    print(f"nif_version - {nv}")
./testframework/integration/modules/scene/b_gen_header.py:    print(f"user_version - {uv}")
./testframework/integration/modules/scene/b_gen_header.py:    print(f"user_version_2 - {uv2}")
./testframework/integration/modules/scene/n_gen_header.py:    print("Expected - {0}, {1}, {2}".format(nif_ver, user_ver, user_ver_2))
./testframework/integration/modules/scene/n_gen_header.py:    print("nif_version - {0}".format(nv))
./testframework/integration/modules/scene/n_gen_header.py:    print("user_version - {0}".format(uv))
./testframework/integration/modules/scene/n_gen_header.py:    print("user_version_2 - {0}".format(uv2))
./testframework/integration/__init__.py:                print(b_obj_names)
./testframework/integration/__init__.py:        print(f"Objects in scene - {len(bpy.data.objects)}")
./testframework/integration/__init__.py:            print(f"Scene Object - {b_obj.name}")
./testframework/integration/__init__.py:        print(f"Export Options {n_filepath}, {self.n_game}")
./testframework/smoke/__init__.py:        print("Addon enabled successfully")
./testframework/smoke/__init__.py:            print("Failed to import io_scene_nif module")
./testframework/smoke/__init__.py:            print("Dependancy was not found, ensure that pyffi was built and included with the installer")
./testframework/unit/modules/property/textures/__init__.py:        print(f"Used Slots: {self.used_textslots}, items = {len(self.used_textslots)}")
./testframework/unit/modules/property/textures/__init__.py:        print(f"Used Slots: {self.used_textslots}, items = {len(self.used_textslots)}")
./testframework/unit/modules/property/textures/__init__.py:        print("Adding textureslot")
./testframework/unit/modules/property/textures/__init__.py:        print(f"Used Slots: {self.used_textslots}, items = {len(self.used_textslots)}")
./testframework/unit/modules/property/textures/__init__.py:        print("Adding textureslots: ")
./testframework/unit/modules/property/textures/__init__.py:        print("Not using second: ")
./testframework/unit/modules/property/textures/__init__.py:        print(f"Used Slots: {self.used_textslots}, items = {len(self.used_textslots)}")
./testframework/unit/utility/test_decorator.py:        print(f"params - object: {a}")
./testframework/unit/utility/test_decorator.py:        print(f"params - string: {bar}")
./testframework/unit/utility/test_decorator.py:        print(f"return - int: {convert}")
./testframework/unit/utility/test_decorator.py:        print(f"params - float: {bar}")
./testframework/unit/utility/test_decorator.py:        print(f"return - str: {convert}")
./testframework/unit/utility/test_decorator.py:        print(f"params - float, int: {s}, {t}")
./testframework/unit/utility/test_decorator.py:        print(f"return - int: {convert}")
./testframework/unit/utility/test_utility.py:        print(f"Class setup: {str(cls)}")
./testframework/unit/utility/test_utility.py:        print(f"Class Teardown: {str(cls)}")
./testframework/unit/utility/test_utility.py:        print("Method setup")
./testframework/unit/utility/test_utility.py:        print("Comparing Matrices:")
./testframework/unit/utility/test_utility.py:                print(f"{str(row)} : {str(col)} ="
./testframework/unit/utility/test_utility.py:        # print(b_matrix)
./testframework/unit/utility/test_utility.py:        print(f"Class setup: {str(cls)}")
./testframework/unit/utility/test_utility.py:        print(f"Class teardown: {str(cls)}")
./testframework/unit/utility/test_utility.py:        print(str(cls))
./testframework/unit/utility/test_utility.py:        print("Method setup: ")
./testframework/unit/utility/test_utility.py:        print("Method teardown: ")
./testframework/utils/nif_inspector/nif_inspector.py:        print("Test running")
./testframework/utils/nif_inspector/nif_inspector.py:        print("setup class")
./testframework/utils/nif_inspector/nif_inspector.py:        print(f"Writing to: {path}")
./testframework/utils/nif_inspector/nif_inspector.py:        print(f"Reading : {path}")
./testframework/utils/nif_inspector/nif_inspector.py:        print(self.nif_file)
./testframework/utils/nif_inspector/nif_inspector.py:        print("creating nif_file")
./testframework/utils/nif_inspector/nif_inspector.py:        print("Checking nif_file")
./todo/depreciated_code.py:            stats.print_stats()
./todo/utilities/mesh_niftools_hull.py:    print(f"Hull finished in {(sys.time()-t):.2f} seconds")
./todo/utilities/mesh_niftools_morphcopy.py:    print('\nStarting morph copy...')
./todo/utilities/mesh_niftools_morphcopy.py:        print('\tQuality not yet implemented due to subdivide bug in Blender.')
./todo/utilities/mesh_niftools_morphcopy.py:        print('\tFalling back on quality level 0.')
./todo/utilities/mesh_niftools_morphcopy.py:                    print(f'\tGenerating higher {PREF_QUALITY}x quality weights.')
./todo/utilities/mesh_niftools_morphcopy.py:    print(f'\tCopying from "{from_data[0].name}" to {len(sel)} other mesh(es).')
./todo/utilities/mesh_niftools_morphcopy.py:    print(f'Morph copy finished in {(sys.time()-t):.2f} seconds')
./todo/utilities/mesh_niftools_weightsquash.py:        print(f"=== {group} ===")
./todo/utilities/mesh_niftools_weightsquash.py:            print("removed due to low weight")
./todo/utilities/mesh_niftools_weightsquash.py:            print(remove_list)
./todo/utilities/mesh_niftools_weightsquash.py:                print(f"removed {vert.index} ({weight:.3f}) from {group}")
./todo/utilities/mesh_niftools_weightsquash.py:    print(f'Weight Squash finished in {(sys.time()-t):.2f} seconds')
./todo/utilities/mesh_niftools_weightsquash.py:    print(f'{num_affected} vertices removed from groups')
./todo/utilities/object_niftools_load_bone_pose.py:        print("no armature selected")
./todo/utilities/object_niftools_load_bone_pose.py:        print(f"loading pose of bone {bonename} from {PREF_BUFFER.val}")
./todo/utilities/object_niftools_load_bone_pose.py:            print(f"WARNING: bone {bonename} not found in armature")
./todo/utilities/object_niftools_load_bone_pose.py:    print(f'Load bone pose finished in {(sys.time()-t):.2f} seconds')
./todo/utilities/object_niftools_save_bone_pose.py:        print("no bones selected in pose mode")
./todo/utilities/object_niftools_save_bone_pose.py:        print(f"saving pose of bone {bonename} to {PREF_BUFFER.val}")
./todo/utilities/object_niftools_save_bone_pose.py:    print(f'Save bone pose finished in {(sys.time()-t):.2f} seconds'
./todo/utilities/object_niftools_set_bone_priority.py:        print("no bones selected in pose mode")
./todo/utilities/object_niftools_set_bone_priority.py:        print(f"setting priority {int(PREF_PRIORITY.val)} on {str(bonename)}")
./todo/utilities/object_niftools_set_bone_priority.py:    print(f'Set bone priority finished in {(sys.time()-t):.2f} seconds')
